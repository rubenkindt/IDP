/*  Birte De Smedt en Ruben Kindt
 * kakuro.idp
 *
 */

vocabulary V {
    type Getal     isa nat
    type Rij    isa nat
    type Kolom    isa nat
    type InvulGetal isa nat
    type Som isa nat

    GegevenR(Rij):Som
    GegevenK(Kolom):Som
    Oplossing(Rij, Kolom)
    Gegeven(Rij, Kolom,Getal)
    Invulling(Rij,Kolom) :Getal
   
} 

structure S : V {
    Getal = {0..23}		//voor de zwarte veldjes
    InvulGetal = {1..9}// voor de witte veldjes
    Rij   = {1..5}
    Kolom = {1..5}
    Som   = {0..23}

    // de gegeven Kolom waarden
    GegevenK = { 1->0; 2->4; 3->9; 4->21; 5->16 }
	//de gegeven Rij waarden
    GegevenR = { 1->0; 2->4; 3->7; 4->23; 5->16 }
    
    //alle zwarte vakjes zien opgave pagina 31
    Gegeven = {
       1,1,0; 1,2,4;  1,3,9; 1,4,0;  1,5,0;
       2,1,4;                2,4,21; 2,5,0;
       3,1,7; 						 3,5,16;
       4,1,0; 4,2,23;
       5,1,0; 5,2,0;  5,3,16;               }
    
   //alle witte vakjes zie opgave pagina 31
   Oplossing={
        2,2;    2,3;
        3,2;    3,3;    3,4;
        		4,3;    4,4;    4,5;
        				5,4;    5,5;}

}
theory T : V {

    //alle gegevens in onze oplossing steken
    !r k g: Gegeven(r,k,g) => Invulling(r,k)=g.
    //zeggen dat we getallen willen invullen voor de vakjes met een waarde tussen 0 en 10, want Getal heeft een groter range
    !r k: ?g: Oplossing(r,k) => Invulling(r,k) =g & g<10 & g~=0.

    //een rij mag niet eenzelfde getal bevatten
    ! R K K2: K~=K2 & (Oplossing(R,K) & Oplossing(R,K2))  => (Invulling(R,K) ~= Invulling(R,K2)).
    //een kolom mag niet eenzelfde getal bevatten
      ! R R2 K: R~=R2 & (Oplossing(R,K) & Oplossing(R2,K))  => (Invulling(R,K) ~= Invulling(R2,K)).

        
    //Implementatie om de sommen te doen kloppen
    //kolommen
   	! K: GegevenK(K) ~=0 => GegevenK(K) = sum{R[Rij]: Oplossing(R,K):Invulling(R,K)}. 
    //rijen
    ! R: GegevenR(R) ~=0 => GegevenR(R) = sum{K[Kolom]: Oplossing(R,K):Invulling(R,K)}.
        
}

procedure main() {
    stdoptions.nbmodels = 10
    printmodels(modelexpand(T,S))
}